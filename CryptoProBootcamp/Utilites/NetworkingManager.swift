//
//  NetworkingManager.swift
//  CryptoProBootcamp
//
//  Created by Kasharin Mikhail on 16.07.2023.
//

import Foundation
import Combine

/*
—ç—Ç–æ —Å–ª–æ–π —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Ä–∞–∑–≥—Ä—É–∑–∫–∏ CoinDataService
*/

class NetworkingManager {
    /*
    —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
     –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª LocalizedError, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å—Ä–∞–∑—É –¥–∞—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑ —Å–≤–æ–π—Å—Ç–≤–∞ errorDescription
    */
    enum NetworkingError: LocalizedError {
        case badURLResponse(url: URL)
        case unknown
        
        var errorDescription: String? {
            switch self {
            case .badURLResponse(url: let url): return "[!] Bad response from URL \(url)"
            case .unknown: return "[ü•≤]Unknown error occurred"
            }
        }
    }
    
    static func download(url: URL) -> AnyPublisher<Data, Error> {
        return URLSession.shared.dataTaskPublisher(for: url)
            .subscribe(on: DispatchQueue.global(qos: .background))
            .tryMap({ try handleURLResponse(output: $0, url: url)})
            .receive(on: DispatchQueue.main)
        /*
         –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ—Ç–æ—Ä—ã–π –≥–æ–≤–æ—Ä–∏—Ç —á—Ç–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ª—é–±–æ–≥–æ Publisher
         –ø–æ—ç—Ç–æ–º—É —Ç–∏–ø –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –±—É–¥–µ—Ç AnyPublisher<Data,Error>
         */
            .eraseToAnyPublisher()
    }
    
    static func handleURLResponse(output:  URLSession.DataTaskPublisher.Output, url: URL) throws -> Data {
        guard let response = output.response as? HTTPURLResponse,
              response.statusCode >= 200 && response.statusCode < 300 else {
            throw NetworkingError.badURLResponse(url: url)
        }
        return output.data
    }
    
    static func handleCompletion(completion: Subscribers.Completion<Error>) {
        switch completion {
        case .finished: break
        case .failure(let error): print(error.localizedDescription)
        }
    }
    
}
